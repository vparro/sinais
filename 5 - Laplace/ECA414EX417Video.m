%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 0 - Exercício 4.17 ECA 414%%%% 12 de junho de 2021 - VCParro%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 1 - Preparação do código %% %% Boas práticas: limpeza de variáveis; variáveis globais%% Constantes; carregar bibliotecas;...%%%%% Limpezaclc;          % limpa visual da tela de comandosclose all;    % limpa as figurasclear all;    % limpa as variáveis%%% Pacote de controlepkg load control         %%% Polos e zeros pkg load signal          %%% --> Bilinear%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 2 - Análise do sistema em malha aberta%% %%% NumeradorN = 10;%%% DenominadorD = conv([1 0],[1 1]);D = conv(D,[1 5]);%%% Gma originalGma = tf(N,D);##Transfer function 'Gma' from input 'u1' to output ...####             10## y1:  -----------------##      s^3 + 6 s^2 + 5 s####Continuous-time model.%%% Polos de malha abertapma = roots(D);%%% Ganho em malha fechadaGmf = feedback(Gma,1);##Transfer function 'Gmf' from input 'u1' to output ...####                10## y1:  ----------------------##      s^3 + 6 s^2 + 5 s + 10####Continuous-time model.pmf = roots([1 6 5 10]);##pmf =####  -5.41780 + 0.00000i##  -0.29110 + 1.32704i##  -0.29110 - 1.32704i%%% Configura simulaçãoT   = 100;Np  = 1000;%%% Visualizar a resposta ao degrau figure(1)step(Gmf,T);set(findall(gcf,'Type','line'),'LineWidth',3);set(gca,'FontSize',14,'LineWidth',2);%%% Análise da resposta a rampa unitáriatempo  = linspace(0,T,Np);rampa  = tempo;yrampa = lsim(Gmf,rampa,tempo);figure(2)plot(tempo, rampa, tempo, yrampa);xlabel('Tempo  em segundos')ylabel('tensão elétrica')grid;set(findall(gcf,'Type','line'),'LineWidth',3);set(gca,'FontSize',14,'LineWidth',2);figure(3)plot(tempo, rampa-yrampa');xlabel('Tempo  em segundos')ylabel('tensão elétrica')grid;set(findall(gcf,'Type','line'),'LineWidth',3);set(gca,'FontSize',14,'LineWidth',2);%%% Errom estacionário a rampae_o = rampa(end) - yrampa(end);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 3 - Análise do sistema com o controlador%% kc = 1;pc = 0.01;zc = pc/0.2;%%% ControladorNc = kc*[1 zc];Dc = [1 pc];Gc = tf(Nc,Dc);%%% GmaModGmaMod = Gc*Gma;%%% GmfModGmfMod = feedback(GmaMod,1);%%% Análise da resposta ao degraufigure(4)step(GmfMod,T);set(findall(gcf,'Type','line'),'LineWidth',3);set(gca,'FontSize',14,'LineWidth',2);%%% Comparação  das respostas ao degrau[ymf, tmf]    = step(Gmf,T);[ymfMod, tmfMod] = step(GmfMod,T);figure(5)plot(tmf,ymf,tmfMod,ymfMod);grid;xlabel('Tempo  em segundos')ylabel('tensão elétrica')set(findall(gcf,'Type','line'),'LineWidth',3);set(gca,'FontSize',14,'LineWidth',2);%%% Comparação do lugar das raízesfigure(6)subplot(1,2,1);rlocus(Gma);subplot(1,2,2)rlocus(GmaMod);%%% Verificar se o erro a rampa está corretoyrampaMod = lsim(GmfMod,rampa,tempo);figure(7)plot(tempo, rampa-yrampaMod');xlabel('Tempo  em segundos')ylabel('tensão elétrica')grid;set(findall(gcf,'Type','line'),'LineWidth',3);set(gca,'FontSize',14,'LineWidth',2);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 4 - Correção do kc%% Ganho     = @(s,zc,pc) (10*(s+zc))/(s*(s+1)*(s+5)*(s+pc))Gmat      = Ganho(pmf(2),zc,pc)Fase      = angle(Gmat)*180/piModulo    = abs(Gmat)Kc        = 1/Modulo