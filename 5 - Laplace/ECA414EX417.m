%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 0 - Exercício 4.17 ECA 414%%%% 11 de junho de 2021 - VCParro%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 1 - Preparação do código %% %% Boas práticas: limpeza de variáveis; variáveis globais%% Constantes; carregar bibliotecas;...%%%%% Limpezaclc;          % limpa visual da tela de comandosclose all;    % limpa as figurasclear all;    % limpa as variáveis%%% Pacote de controlepkg load control         %%% Polos e zeros pkg load signal          %%% --> Bilinear%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 2 - Sistema original em malha aberta%%% NumeradorN = 10;%%% DenominadorD = conv([1 0],[1 1]);D = conv(D, [1 5]);%%% Gp(s)Gp = tf(N,D);## Transfer function 'Gp' from input 'u1' to output ...####             10## y1:  -----------------##      s^3 + 6 s^2 + 5 s#### Continuous-time model.%%% Analisando em malha fechadaGmf = feedback(Gp,1);## Transfer function 'Gmf' from input 'u1' to output ...####                10## y1:  ----------------------##      s^3 + 6 s^2 + 5 s + 10#### Continuous-time model.%%% Visualizaçãofigure(1)step(Gmf);set(findall(gcf,'Type','line'),'LineWidth',3);set(gca,'FontSize',14,'LineWidth',2);%%% Polos que devem ser mantidosDmf = [1 6 5 10];Nmf = 10;pmf = roots(Dmf);##pmf =####  -5.41780 + 0.00000i##  -0.29110 + 1.32704i##  -0.29110 - 1.32704i%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 3 - Análise do erro estacionário%%% pc/zc = 0.2 - Teoria%%% adotando pc = 0.01 (arbitrário)pc = 0.01;zc = pc/0.2;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 4 - Controlador%%% Polos ajustadosDmfMod = [1 6.05 5.3 10.41 2.54];NmfMod = [10.16 2.54];pmfMod = roots(DmfMod);Ganho = @(s,zc,pc) ((10*(s+zc))/((s*(s+1)*(s+5)*(s+pc))))Gma     = Ganho(pmfMod(2),zc,pc);fase    = angle(Gma)*180/pi;modulo  = abs(Gma);Kc      = 1/modulo;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 5 - ValidaçãoNma    =  Kc*10*[1 zc];Dma    =  conv([1 pc],D);Gma    = tf(Nma,Dma);GmfMod = feedback(Gma,1)%%% Visualização resposta ao degraufigure(2)[y1,t] = step(Gmf,30,1e-1); [y2,t] = step(GmfMod,30,1e-1);plot(t,y1,t,y2);grid; xlabel('Tempo em segundos')title('Resposta ao degrau')set(findall(gcf,'Type','line'),'LineWidth',3);set(gca,'FontSize',14,'LineWidth',2);%%% Visualização resposta ao degraufigure(3)rampa = t;y1 = lsim(Gmf,rampa,t); y2 = lsim(GmfMod,rampa,t);plot(t,rampa,t,y1,t,y2);grid; xlabel('Tempo em segundos')title('Resposta rampa')set(findall(gcf,'Type','line'),'LineWidth',3);set(gca,'FontSize',14,'LineWidth',2);%%% Analisando somente o errofigure(4)plot(t,rampa-y2);grid; xlabel('Tempo em segundos')title('Erro - Resposta rampa')set(findall(gcf,'Type','line'),'LineWidth',3);set(gca,'FontSize',14,'LineWidth',2);%%% lugar das raizesfigure(5)subplot(1,2,1);rlocus(tf(N,D))subplot(1,2,2);rlocus(tf(Nma,Dma))%%% verificando os polos## Transfer function 'GmfMod' from input 'u1' to output ...####                    10.16 s + 2.54##  y1:  -----------------------------------------##       s^4 + 6.05 s^3 + 5.3 s^2 + 10.41 s + 2.54#### Continuous-time model.