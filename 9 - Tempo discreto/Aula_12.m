%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 0 - Projeto de sistema dinâmico discreto%% %% a. Sistema dinâmico com resposta senoidal%%%%%%  27 de Outubro de 2021%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 1 - Preparação do código %% %% Boas práticas: limpeza de variáveis; variáveis globais%% Constantes; carregar bibliotecas;...%%%%% Limpezaclc;          % limpa visual da tela de comandosclose all;    % limpa as figurasclear all;    % limpa as variáveis%%% Pacote de controlepkg load control         %%% Polos e zeros pkg load signal          %%% --> Bilinear%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 2 - Tempo contínuo %% N = 200*pi;                  % NumeradorD = [1 0 (200*pi)^2];        % Denominador%%% Filtro passa baixas contínuoHs = tf(N,D);%%% Criar uma senoide artificial com To = 5/100 segundosTo    = 1/100;                % período da senóideomega = 2*pi/To;              % frequência angularNp    = 1e5;                  % número de pontos do gráficotempo = linspace(0,0.5,Np);  % vetor de tempox     = sin(omega*tempo);     % senóide%%% Filtrando o sinal x(t)x_f = lsim(Hs,x,tempo);%%% Visualizaçãofigure()impulse(Hs,0.05);%%% Aprimora a aparência do gráficoset(findall(gcf,'Type','line'),'LineWidth',3);set(gca,'FontSize',14,'LineWidth',2);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 3 - Tempo discreto %% % Ap3 --> y = (1/k1)*(-ya*k2 - y2a*k3 + x*a + 2*a*xa +a*x2a)%%% Escolha da taxa de amostragemFs = 4000;   % A senoide tem 2Hz, devendo ser amostrada com 4Hz (min)T  = 1/Fs;  % Taxa de amostragemtd    = linspace(0,0.1,0.1/T);%%% Criar o impulsoxi    = [1 zeros(1,Np-1)];%%% Valores iniciais das variáveisya   = 0;y2a  = 0;xa   = 0; x2a  = 0;%%% Calcular as constantesa  = 200*pi;k1 = (2/T)^2+ a^2;k2 = 2*a^2-2*(2/T)^2;k3 = (2/T)^2+ a^2;for k = 1:length(td)    y(k) = (1/k1)*(-ya*k2 - y2a*k3 + xi(k)*a + 2*a*xa +a*x2a);    %%% Atualizar o valores    y2a = ya;  ya  = y(k);  x2a = xa;  xa  = xi(k);  end%%% Acerto da amplitudeymax = max(abs(y));   % determina o valor máximo do módulo de yy    = y/ymax;        % normaliza o valor máximo[Ys,tempo,X0] = impulse(Hs,0.1)%%% Visualizando a resposta do sistema ao impulsofigure()plot(td,y,'k+'); grid; hold; plot(tempo,Ys,'b-');%%% Aprimora a aparência do gráficoset(findall(gcf,'Type','line'),'LineWidth',3);set(gca,'FontSize',14,'LineWidth',2);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 4 - Tempo discreto %% % Ap2 --> y = (1/(1+aˆ2*Tˆ2))*(2*ya) - y2a + x*a*T^2%%% Valores iniciais das variáveisya   = 0;y2a  = 0;xa   = 0; x2a  = 0;for k = 1:length(td)    y(k) = (1/(1+a^2*T^2))*(2*ya - y2a + xi(k)*a*T^2);    %%% Atualizar o valores    y2a = ya;  ya  = y(k);  x2a = xa;  xa  = xi(k);  end%%% Acerto da amplitudeymax = max(abs(y));   % determina o valor máximo do módulo de yy    = y/ymax;        % normaliza o valor máximo%%% Visualizando a resposta do sistema ao impulsofigure()plot(td,y,'k+'); grid; hold; plot(tempo,Ys,'b-')%%% Aprimora a aparência do gráficoset(findall(gcf,'Type','line'),'LineWidth',3);set(gca,'FontSize',14,'LineWidth',2);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 5 - Tempo discreto %% % Ap1 --> y = a*T^2x2a + 2*ya -(1+ a^2*T^2)*y2a%%% Valores iniciais das variáveisya   = 0;y2a  = 0;xa   = 0; x2a  = 0;for k = 1:length(td)    y(k) = a*T^2*x2a + 2*ya -(1+ a^2*T^2)*y2a;    %%% Atualizar o valores    y2a = ya;  ya  = y(k);  x2a = xa;  xa  = xi(k);  end%%% Acerto da amplitudeymax = max(abs(y));   % determina o valor máximo do módulo de yy    = y/ymax;        % normaliza o valor máximo%%% Visualizando a resposta do sistema ao impulsofigure()plot(td,y,'k+'); grid; hold; plot(tempo,Ys,'b-')%%% Aprimora a aparência do gráficoset(findall(gcf,'Type','line'),'LineWidth',3);set(gca,'FontSize',14,'LineWidth',2);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 6 - Analisando os resultados%% clc;display('Funções de transferência...')%%% AP1: Função de transferênciaN1 = a*T^2;D1 = [1 -2 1+a^2*T^2];G1 = tf(N1,D1,T)%%% AP2: Função de transferênciaN2 = [a*T^2 0 0];D2 = [1+a^2*T^2 -2 1];G2 = tf(N2,D2,T)%%% AP3: Função de transferênciaN3 = a*[1 2 1];D3 = [(2/T)^2+a^2 (2*a^2-2*(2/T)^2) (2/T)^2+a^2];G3 = tf(N3,D3,T);display('Polos de cada aproximação...') p1 = roots(D1)p2 = roots(D2)p3 = roots(D3)display('Módulo dos polos...') abs(p1)abs(p2)abs(p3)display('Investigando a diferença de frequência...') %%% determino a fase do polofase = angle(p3)*180/pi%%% determinar a frequência do polo%%% 180  --> Fs/2%%% fase --> fxfx = fase*(Fs/2)/180