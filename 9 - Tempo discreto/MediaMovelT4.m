%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 0 - Projeto de filtro e sintese de voz%% %% a. projetar um filtro digital de fc = 1000Hz e aplicar ao sinal gaita.wav mesmo gráfico.%%%%  04 de junho de 2021%% %%   0. N = 3 - análise.%%   1. Fazer o código para N = 5%%   2. Lei de formação: o que muda de N = 3 para N = 5 e é regular%%   O N influencia nos modulos:....%%   3. Automato: MediaMovel(N) --> indica todos os resultados feitos.  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 1 - Preparação do código %% %% Boas práticas: limpeza de variáveis; variáveis globais%% Constantes; carregar bibliotecas;...%%%%% Limpezaclc;          % limpa visual da tela de comandosclose all;    % limpa as figurasclear all;    % limpa as variáveis%%% Pacote de controlepkg load control         %%% Polos e zeros pkg load signal          %%% --> Bilinear%%%function Hw  =  RespostaFrequencia1(N,fs,Np,T)    %%% Cria N-1 pontos espaçado de 1    n   = [0:1:N-1];    %%% cria o vetor frequência    w   = linspace(-pi*fs,pi*fs,Np);    %%% Inicia a somatória    aux = 0;    %%% Faz a somatória    for k = 1 : N      aux  =  aux  + exp(-j*w*T).^n(k);    end    %%% Apolica o fator  multiplicativo    Hw = aux * (1/N);  endfunction%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 2 - Sinal: calibração e sinal real%%%% trabalhar com um sinal amostrado%% %% trabalhar com um sinal real - gaita - hamônica [gk,fs] = audioread ('gaita.wav');      % transformei um arquivo .wav em um vetor g(k)  fmax    = fs/2; Ng      = length(gk); T       = 1/fs;  tempo   = linspace(0,Ng*T,Ng); %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 3 - Análise da resposta em frequência da média móvel%%%% y(k)       = (1/3) * [g(k) + g(k-1) + g(k-2)]%%%% Y(z)/G(z) = (1/3) * [1 + z^(-1) + z^(-2)]%%%% z = e^(jwT)%%% Ganho em frequência da média movel - substituindoHw  =  @(w,T) (1/3)*(1 + exp(-j*w*T) + exp(-2*j*w*T));%%% Amostragem - TT   = 1/fs;%%% vetor de frequênciasNp  = Ng;w   = linspace(-pi*fs,pi*fs,Np);%%% VisualizarHw  =  RespostaFrequencia1(3,fs,Np,T);% GanhoMM  = Hw(w,T);GanhoMM  = Hw;ModuloMM = abs(GanhoMM);FaseMM   = angle(GanhoMM);figure(1)subplot(2,1,1); plot(w/(2*pi),ModuloMM);xlabel('Frequencia em Hz') ylabel('Modulo')set(findall(gcf,'Type','line'),'LineWidth',3);set(gca,'FontSize',14,'LineWidth',2);subplot(2,1,2); plot(w/(2*pi),FaseMM);xlabel('Frequencia em Hz') ylabel('Fase')set(findall(gcf,'Type','line'),'LineWidth',3);set(gca,'FontSize',14,'LineWidth',2);%%% Conclusões% 1 trata-se de um filtro passa baixas% 2 tem dois nulos% 3 tem fase linear%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 4 - Aplicando o filtro ao sinal da gaita%%##     An equivalent form of the equation is:####                    N                   M##          y(n) = - SUM c(k+1) y(n-k) + SUM d(k+1) x(n-k)  for 1<=n<=length(x)##                   k=1                 k=0####     where c = a/a(1) and d = b/a(1).### Função de transferênciaNd    = [1/3 1/3 1/3];Dd    = [1 0 0];GanhoFiltroMM = tf(Nd,Dd,T)yMM     = filter (Nd, Dd, gk);%%% Visualizando no tempofigure(2)subplot(2,1,1); plot(tempo,gk)xlabel('tempo em segundos')title('Entrada')set(findall(gcf,'Type','line'),'LineWidth',3);set(gca,'FontSize',14,'LineWidth',2);subplot(2,1,2); plot(tempo,yMM)xlabel('tempo em segundos')title('Saida')set(findall(gcf,'Type','line'),'LineWidth',3);set(gca,'FontSize',14,'LineWidth',2);%%% Visualizando na frequênciaGkF = fft(gk);GkF = fftshift(GkF);figure(3)subplot(2,1,1); plot(w/(2*pi),ModuloMM);xlabel('Frequencia em Hz') ylabel('Modulo')axis ([-2000 +2000])set(findall(gcf,'Type','line'),'LineWidth',3);set(gca,'FontSize',14,'LineWidth',2);subplot(2,1,2); plot(w/(2*pi),GkF);xlabel('Frequencia em Hz') ylabel('Modulo')axis ([-2000 +2000])set(findall(gcf,'Type','line'),'LineWidth',3);set(gca,'FontSize',14,'LineWidth',2);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 5 - Criando o sinal artificial%%%%  g1[k] = cos(w1*tempo) e w1 --> ao zero da FT%%%%% determinando os zeros do ganhozeros = roots(Nd);ModuloZeros = abs(zeros);FaseZeros   = angle(zeros);%%  2pi          - ws%%  ThetaZero1   - w1%%% frequência angular do zero pela teoriaws   = 2*pi*fs;w1   = FaseZeros(1)*ws/(2*pi);%% 14700Hzf1   = w1/(2*pi); %%% gerando o sinal gk1 - A * sin(wt + angulo)gk1 = 1 * sin(w1*tempo + 0);%%% Aplicando o filtroyMM1     = filter (Nd, Dd, gk1);%%% Visualizando no tempofigure(4)subplot(2,1,1); plot(tempo,gk1)xlabel('tempo em segundos')title('Entrada')set(findall(gcf,'Type','line'),'LineWidth',3);set(gca,'FontSize',14,'LineWidth',2);axis ([0 1])subplot(2,1,2); plot(tempo,yMM1)xlabel('tempo em segundos')title('Saida')set(findall(gcf,'Type','line'),'LineWidth',3);set(gca,'FontSize',14,'LineWidth',2);axis ([0 1])%%% Visualizando o zero na frequênciaGkF1 = fft(gk1);GkF1 = fftshift(GkF1);figure(5)subplot(2,1,1); plot(w/(2*pi),ModuloMM);xlabel('Frequencia em Hz') ylabel('Modulo')set(findall(gcf,'Type','line'),'LineWidth',3);set(gca,'FontSize',14,'LineWidth',2);subplot(2,1,2); plot(w/(2*pi),GkF1);xlabel('Frequencia em Hz') ylabel('Modulo')set(findall(gcf,'Type','line'),'LineWidth',3);set(gca,'FontSize',14,'LineWidth',2);