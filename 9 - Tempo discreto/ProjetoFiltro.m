%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 0 - Proposta para a segunda parte do trabalho.%% %%    a. Cada aluno gravar 3 vezes cada vogal e determinar: fo, f1 e f2 para cada gravação.%%      a.1 3 * 3 * 5 --> 45 valores --> a,e,i,o,u%%    b. Agrupar as informações da turma --> por exemplo: criar uma planilha comum (csv).%%      b.1 Número de alunos * 45 valores - Base de conhecimento.%%    c. Você gerar 5 arquivos, um para cada vogal, que não serõa usados no treinamento -%%    não está na base de conhecimento - usado como validação (teste).%%      c.1 1 --> acerto e 0 --> erro: 1 0 1 1 0 para cada aluno.%%    d. Análise: %%        d.1 histogramas de cada frequência para cada vogal: Média e a variância%%        d.2 a taxa de erro / acerto do sistema de reconhecimento.%%%%%%  Entrega 23/03 até 23:59 - individual%%%%  Reposição 07/04 e 14/04%%%%  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 1 - Preparação do código %% %% Boas práticas: limpeza de variáveis; variáveis globais%% Constantes; carregar bibliotecas;...%%%%% Limpezaclc;          % limpa visual da tela de comandosclose all;    % limpa as figurasclear all;    % limpa as variáveis%%% Carregando os pacotes necessáriospkg load control%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 2 - Sinal: calibração e sinal real%%%% trabalhar com um sinal amostrado%% %% trabalhar com um sinal real - gaita - hamônica [gk,fs] = audioread ('gaita.wav');      % transformei um arquivo .wav em um vetor g(k) %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 3 - Fourier do sinal%%%% trabalhar com um sinal amostrado%% %%% Fourier do sinalGkF   =  fft(gk);%%% normalizandoGkF   =  GkF/max(abs(GkF));%%% Eixo frequência - calibraçãoNp    =  length(gk);          freq  =  linspace(-fs/2, fs/2, Np);%%% Visualizaçãofigure(1)plot(freq, abs(fftshift(GkF)));xlabel('Frequencia em Hz')ylabel('Magnitude')axis ([-5000 +5000])%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 4 - Projeto do filtro%%%% mapeamento de Laplace em z%% %%% frequência de corte do filtrofc    = 2000;         % meia potência (50%) - definiçãoRC    = 1/(2*pi*fc);  % equivalente analógico - R e C%%% filtro N      = 1;            % numerador do filtroD      = [RC 1];       % denominadorGf     = tf(N,D);      % ganho do filtro em laplace##Transfer function 'Gf' from input 'u1' to output ...####             1## y1:  ---------------##      7.958e-05 s + 1####Continuous-time model.%%% Fourier do filtro --> s = jwFiltro = @(w,RC)   1./(RC*j*w + 1);%%% Comparar o filtro com o sinal de entrada na frequência%%% Visualizaçãofigure(2)%% entradaplot(freq, abs(fftshift(GkF)));hold;%% filtro ordem 1plot(freq, abs(Filtro(2*pi*freq,RC)))%% filtro ordem 2plot(freq, abs(Filtro(2*pi*freq,RC).*Filtro(2*pi*freq,RC)))%% filtro ordem 3plot(freq, abs(Filtro(2*pi*freq,RC).*Filtro(2*pi*freq,RC).*Filtro(2*pi*freq,RC)))xlabel('Frequencia em Hz')ylabel('Magnitude')axis ([-5000 +5000])set(findall(gcf,'Type','line'),'LineWidth',3);set(gca,'FontSize',14,'LineWidth',2);%%% Comparar entrada, filtro e saidaentrada = GkF;%%% detemrinei as saidas para cada filtro####saida1  = entrada'.*Filtro(2*pi*freq,RC);##saida2  = entrada.*Filtro(2*pi*freq,RC).*Filtro(2*pi*freq,RC);##saida3  = entrada.*Filtro(2*pi*freq,RC).*Filtro(2*pi*freq,RC).*Filtro(2*pi*freq,RC);%%% determinar o polo em spolosL    = roots(D);%%% Mapeamento em zT         = 1/fs;             % taxa de amostragempolosZ    = exp(polosL*T);    % mapeamento de s em z%%% Função de transferência do filtroN         =  1/RC;D         =  [1 -polosZ(1)];  % denominadorGfZ       =  tf(N,D,T)        % filtro em tempo discreto##Transfer function 'GfZ' from input 'u1' to output ...####          1## y1:  ----------##      z - 0.7521####Sampling time: 2.26757e-05 s##Discrete-time model.%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 5 - Aplicaçào do filtro%%% (z - 0.7521) * Y(z) = X(z)*Kz --> dinâmica%%%%%% y[k] = 0.7521*y(k-1) + x(k-1)*Kz%%% Valores iniciaisya  = 0;        % atrasado de uma amostraxa  = 0; %%% Criar a entrada - x[k] - impulsoNx  = length(gk);                 % número de pontosx   = gk;                         % entrada%%% determino a saída  y[k] = kz*x[k-2] + 0.618 y[k-1] - y[k-2]kz    = 1/RC;                % lavor que ajusta a amplitude for k = 1 : Nx - 3     y(k) = 0.7521*ya + xa*kz;      %%% atualização         ya  = y(k);   xa  = x(k);   end%%% Visualizaçãofigure(3)stem(y)set(findall(gcf,'Type','line'),'LineWidth',3);set(gca,'FontSize',14,'LineWidth',2);                             