%%%%  Função de trasnferência da vogal## Gvogal#### Transfer function 'Gvogal' from input 'u1' to output ...####             1.308e+04## y1:  ------------------------##      s^2 + 1150 s + 2.137e+07#### Continuous-time modelpkg load controlload('Voz.mat');N  =  13077;D  = [1 1150 2.137e7];%%% A série temporal representada em LaplaceGvogal = tf(N,D);%%% s = sigma + jw --> sigma < 0 --> decrescente%%% Comparação com Fourier: sigma = 0 e analisar o jw## Gvogal#### Transfer function 'Gvogal' from input 'u1' to output ...####             1.308e+04## y2:  ------------------------##      (jw)^2 + 1150 jw + 2.137e+07#### Continuous-time model.%%% Criando a função de Fourier GFourier = @(w) 1.308e+04./((j*w).^2 + 1150*(j*w) + 2.137e+07)%%% Comparar o Fourier da série temporal com o Fourier da função de transferênciafigure(1)plot(frequencia,Y0);xlabel('Frequencia em Hz');ylabel('ganho em log10');title('Comparacao entre Fourier e Laplace');hold;plot(frequencia, 20*log10(abs(GFourier(2*pi*frequencia))))grid;set(findall(gcf,'Type','line'),'LineWidth',3);set(gca,'FontSize',14,'LineWidth',2);%%% Relação da série temporal com os polosNs    = length(frequencia)sigma = linspace(-1000,0,Ns);w     = 2*pi*frequencia;GLaplace = @(s) 1.308e+04./((s).^2 + 1150*(s) + 2.137e+07)for m = 1: Ns  x = sigma(m);  for n = 1: Ns    s = x + j*w(n);    Ganho(m,n) = abs(GLaplace(s));
  endfor  endfor    %%% Visualizar o resultado      figure(2)  surf(sigma,frequencia,20*log10(abs(Ganho)))  xlabel('sigma')  ylabel('frequencia')  zlabel('Ganho')
