%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 0 - Problema%% decomposição de um sinal g(t) em sinais harmônicos%% g(t) = sum_{n=1}^N cn xn(t) --> cn%% 1. Integral simbólica - variável t:tempo e n:frequência% 2. Substituição de valores de n% 3. Visualização dos resultados% 4. Sintetizar a função g(t) - somatória (?)% 5. Validação: o resultado faz sentido?%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 1 - Boas práticasclear all;         % limpa as variáveis(todas)close all;         % limpo todas as figurasclc;               % limpa visualmente a tela%%% Bibliotecaspkg load symbolic; % carrega o pacote simbólico%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 2 - definir g(t)%% onda quadrada - segmentosTo  = 2*pi;      % período da onda quadradato  = -pi/2;     % tempo inicial de g(t)tau = To/2;      % duração do nível alto de g(t)th  = to + tau;  % tempo que termina o nível alto de g(t)tl  = to + To;   % tempo que termina o nível baixo de g(t)Ah  = +1;        % amplitude em nível altoAl  = -1;        % amplitude em nível baixo%%% Determinando parâmetrosfo  = 1/To;      % determinando a frequência de g(t)wo  = 2*pi*fo;   % determinando a frequência angular%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 3 - Cálculo do c%% Integral simbólica - t%% Symbolic pkg v2.9.0 % Python communication link active, SymPy v1.5.1.%syms t%%% Determinando o numerador%%  int_to^th g(t)x(t) dt + int_th^tl g(t)x(t) dtIpos = int(+1*cos(t),t,to,th);Ineg = int(-1*cos(t),t,th,tl);Inum = Ipos + Ineg;%%% Determinando o denominadorIden = int(cos(t)*cos(t),t,0,To);%%% Determinar o cc   = Inum/Iden;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 3 - Cálculo do cn - analisador%% Integral simbólica - t:tempo e n:frequência%% Symbolic pkg v2.9.0 % Python communication link active, SymPy v1.5.1.%syms n t%%% Determinando o numerador%%  int_to^th g(t)x(t) dt + int_th^tl g(t)x(t) dtIpos = int(+1*cos(n*t),t,to,th);Ineg = int(-1*cos(n*t),t,th,tl);Inum = Ipos + Ineg;%%% Determinando o denominadorIden = int(cos(n*t)*cos(n*t),t,0,To);%%% Determinar o ccn   = Inum/Iden;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 5 - Substituição dos valores de n% n = [1,2,3,4,5,6,7,8,9,10];N   = 100;              % número de termos da decomposiçãon   = [1:1:N];          % geração do vetor ncnNumerico = eval(cn);  % determina cn numericamente%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 6 - Visualizando o resultadofigure()stem(n,cnNumerico,'linewidth',2);             % plot de valores discretosxlabel('valores de n');         % label eixo x   ylabel('Valores de cn');        % label eixo ytitle('Decomposição de g(t)');  % título do gráficogrid;                           % gride%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 7 - Sintetizador%% g(t) = c1 cos(t) + 0 cos(2t) + c3 cos(3t) + 0 cos(4t) +...% % g(t) --> cn: [c1 0 c3 0 c5 0 c7 0 c9 0] - análise%% cn: [c1 0 c3 0 c5 0 c7 0 c9 0] --> g(t) - sínteseM     = 1000;                       % sample rate - pontostempo = linspace(-To,To,M);         % vetor linearg = cnNumerico(1)*cos(tempo);             % primeira harmônicag = g + cnNumerico(2)*cos(2*tempo);       % segunda harmônicag = g + cnNumerico(3)*cos(3*tempo);       % terceira harmônicag = g + cnNumerico(4)*cos(4*tempo);       % quarta harmônicag = g + cnNumerico(5)*cos(5*tempo);       % quinta harmônicag = g + cnNumerico(6)*cos(6*tempo);       % sexta harmônicag = g + cnNumerico(7)*cos(7*tempo);       % sétima harmônicag = g + cnNumerico(8)*cos(8*tempo);       % oitava harmônicag = g + cnNumerico(9)*cos(9*tempo);       % nona harmônicag = g + cnNumerico(10)*cos(10*tempo);     % décima harmônicafigure()plot(tempo,g,'linewidth',2);    % plot de valores continuos (interpolar)xlabel('tempo');                % label eixo x   ylabel('amoplitude');           % label eixo ytitle('Sintese de g(t)');       % título do gráficogrid;  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 8 - Sintetizador usando forg1 = cnNumerico(1)*cos(tempo);    % primeira harmônica                                  % incia a variável g1                                                           for k = 2 : N    g1 = g1 + cnNumerico(k)*cos(k*tempo);  endfigure()plot(tempo,g1,'linewidth',2,'k-');   % plot de valores continuos (interpolar)xlabel('tempo');                     % label eixo x   ylabel('amoplitude');                % label eixo ytitle('Sintese de g(t)');            % título do gráficogrid;  