%%% Análise de sinais%%% 0 - Boas práticas clear all;          % limpa as variáveisclose all;          % fecha todas as figurasclc;                % limpa a telapkg load symbolic;  % carrega o pacote simbólico - Octave%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 1 - Preparação do código - variáveis globais e configuráveisN   =   10;         % número de harmônicas%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 2 - Modelagem do sinal%% onda quadrada - q(t) - paramterizadaA1  =   1;           % amplitude nível altoA2  =   0;           % amplitude nível baixotau =   1;           % largura do pulsoTo  =   2;           % período do sinal%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 2.1 - Modelagem do sinal%% valores calculadoswo  = 2*pi/To;       % frequência angularfo  = 1/To;          % frequência fundamentaln   = [-N:1:N];      % número de harmônicasf   = n*fo;          % frequência das harmônicas%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 3 - Análise de Fourier%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 3.1 - Análise simbólicasyms n tDn  = inv(To)*int(A1*exp(-j*n*wo*t),t,0,tau) + inv(To)*int(A2*exp(-j*n*wo*t),t,tau,To)D_o = inv(To)*int(A1,t,0,tau) + inv(To)*int(A2,t,tau,To)%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 3.2 - Determinando o valores numéricosn   =   [-N:1:N];      % número de harmônicasDn  =   eval(Dn);      % valores numéricosD_o =   eval(D_o);     % valor médioDn(N+1) = D_o;         % subistituindo no vetor Dn%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 3.3 - Determina a potência do sinal %% no tempoPg  =   inv(To)*int(A1^2,t,0,tau) + inv(To)*int(A2^2,t,tau,To);Pg  =   eval(Pg);%% na frequênciaVetor  = [abs(Dn(N+1))^2  2*abs(Dn(N+2:end)).^2];Pgn    = cumsum(Vetor);clc;                    % limpa os avisos anterioresbanda = (Pgn(end)/Pg)*100%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 4 - Síntese do sinal%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 4.1 - Definindo o tempoM   =   1000;         % número de pontos de simulaçãoTs  =   To/M;         % resoluçãotempo = [0:Ts:To];    % vetor tempo%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 4.2 - Sínteseaux   =   0;          % inicia a somátoriafor k = 0:2*N         % N pontos omega negativo + N pontos omega positivo                      % + omnega = 0 --> 2*N+1                          aux = aux + Dn(k+1)*exp(j*n(k+1)*wo*tempo);endsinal = aux;          % sinal reconstruido ou sintetizado%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 5 - Visualizaçãofigure(1)stem(f,abs(Dn)); title('Espectro de Amplitude');xlabel('Frequencia');ylabel('Amplitude');figure(2)plot(tempo,sinal); title('Sinal q(t)');xlabel('tempo em segundos');ylabel('Amplitude');