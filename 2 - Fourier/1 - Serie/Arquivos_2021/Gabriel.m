%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 1 - PreparaÃ§Ã£o do cÃ³digo%%%% Boas prátics: limpeza de variávies; variávies globais%% Constantes; carregar bibliotecas;...%%%%% Limpezaclc; % limpa visual da tela de comandosdisplay("1 - Preparação do Código");close all; % limpa as figurasclear all; % limpa as variávies%%% Carregar bibliotecaspkg load symbolic; % biblioteca simbólica%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 2 - calcular o valor de Dn%%%% Ambiente de cálculo integral e simbólico%%%% Symbolic pkg v2.9.0:%% Python communication link active, SymPy v1.5.1.%%%% g(t) = exp(-t)%% Dn = 1/To int_0^To g(t) exp(-j n wo t) dt%%%% Dn = 1/To int_0^To exp(-t) exp(-j n wo t) dt%%%% exp(-t) exp(-j n wo t) = exp(-(t + j n wo t)) = exp(-(1 + j n wo)t)%%display("2 - Calculando simbolicamente Dn...");syms n wo to To t % t - tempo variável simbólica%%% numerador de DnInum = int(exp(-(1+j*n*wo)*t),t,to,to+To);%%% determinando DnDn = Inum/To; % da teoria - Denominador = To%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 3 - Problema%%%% Um sinal periodico g(t) que definido pela equação 2 no%% intervalo 0 ? t ? 1 que%% representa exatamente a equação de um período deste%% sinal que equivale a T0 = 1s.%%%% Definir a onda quadradadisplay("3 - Definindo valores numéricos de g(t)...");To = 1; % período da onda quadradato = 0; % instante inicial de g(t)%%% ParÃ¢metros calculadosfo = 1/To; % frequênciada onda quadradawo = 2*pi*fo; % frequência angular de g(t)%%% Função TReórica g(t)gtTeo = @(t) exp(-t); %cria a função teórica%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 4.1 - Determinando numericamente os valoresn = [-1 0 +1]; % atribui valores para a variável nDnNum = eval(Dn); % substitui os valores numéricosM = 1000; % número de pontos da análisetempo = linspace(0,To,M); % cria o vetor tempo%%% Sintetizei a primeira harmônica de aproximaçãop1 = DnNum(1)*exp(j*n(1)*wo*tempo) + DnNum(2)*exp(j*n(2)*wo*tempo) + DnNum(3)*exp(j*n(3)*wo*tempo);%%% Deteminar g(t)gt = gtTeo(tempo); % sinal teórico%%% Determinar o erro entre p1 e gtr1 = gt - p1; % erro ou resíduo%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 4.2 - Determinando numericamente os valoresn = [-2 2]; % atribui valores para a variável nDnNum = eval(Dn); % substitui os valores numéricosM = 1000; % número de pontos da análisetempo = linspace(0,To,M); % cria o vetor tempo%%% Sintetizei a primeira harmônica de aproximaçãop2 = p1 + DnNum(1)*exp(j*n(1)*wo*tempo) + DnNum(2)*exp(j*n(2)*wo*tempo);%%% Deteminar g(t)gt = gtTeo(tempo); % sinal teórico%%% Determinar o erro entre p1 e gtr2 = gt - p2; % erro ou resíduopant = 0;for k = 0 : M-1n =[-1-k 1+k]pn = pant + DnNum(1)*exp(j*n(1)*wo*tempo) + DnNum(2)*exp(j*n(2)*wo*tempo);pant = pn;endrn = gt - pn;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 5 - Visualizar as variáveis: r1, p1 e gtfigure(1)subplot(2,1,1); % divide a figura em duas linhasplot(tempo,gt, 'b..', 'linewidth',3);hold;plot(tempo,p1, 'g-.', 'linewidth',3);xlabel('tempo em segundos');ylabel('Amplitude em volts');title('Sinal sintetizado e original')gridsubplot(2,1,2); % divide a figura em duas linhasplot(tempo,r1, 'k-', 'linewidth',3);xlabel('tempo em segundos');ylabel('Amplitude em volts');title('Sinal do resíduo');figure(2)subplot(2,1,1); % divide a figura em duas linhasplot(tempo,gt, 'b..', 'linewidth',3);hold;plot(tempo,p2, 'g-.', 'linewidth',3);xlabel('tempo em segundos');ylabel('Amplitude em volts');title('Sinal sintetizado e original')gridsubplot(2,1,2); % divide a figura em duas linhasplot(tempo,r2, 'k-', 'linewidth',3);xlabel('tempo em segundos');ylabel('Amplitude em volts');title('Sinal do resíduo')gridfigure(3)subplot(2,1,1); % divide a figura em duas linhasplot(tempo,gt, 'b..', 'linewidth',3);hold;plot(tempo,real(pn), 'g-.', 'linewidth',3);xlabel('tempo em segundos');ylabel('Amplitude em volts');title('Sinal sintetizado e original')gridsubplot(2,1,2); % divide a figura em duas linhasplot(tempo,real(rn), 'k-', 'linewidth',3);xlabel('tempo em segundos');ylabel('Amplitude em volts');title('Sinal do resíduo')grid