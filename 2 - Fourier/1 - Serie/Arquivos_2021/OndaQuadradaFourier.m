%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 0 - Boas práticasclear all;                        % apaga todas as variáveisclose all;                        % fechar as figurasclc;                              % limpa o ambiente de simulaçãopkg load symbolic                 % somente para o OctaveN = 10;                           % número de harmôncias para análise%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 1 - Definir o sinal g(t) - onda pulsadaA1  = 1;                              % Nível alto da onda pulsadaA2  = -1;                             % Nível baixo da onda pulsadatau = pi;                             % Largura o pulso em nível altoT0  = 2*pi;                           % Periodo do sinal  w0  = 2*pi/T0;                     % frequência angularf0  = 1/T0;                        % frequência angularn   = [-N:1:N];                    % harmônicas de Fourierf   = n*f0;                        % frequência das harmônicas%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 2 - Calcular a integral de Fourier : tempo em frequênciasyms t n%% Onda quadradaDn  = inv(T0)*int(A1*exp(-j*n*w0*t),t,0,tau) + inv(T0)*int(A2*exp(-j*n*w0*t),t,tau,T0);D0  = inv(T0)*int(A1,t,0,tau) + inv(T0)*int(A2,t,tau,T0);%% Pulso centrado na origemPn  = inv(T0)*int(A1*exp(-j*n*w0*t),t,-tau/2,tau/2);P0  = inv(T0)*int(A1,t,-tau/2,tau/2)%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 3 - Calcular os valores numéricos de Dnn   = [-N:1:N];                     % redefine os valores de nDn  = eval(Dn);                     % valores numéricosD0  = eval(D0);                     % valor médioDn(N+1) = D0;                       % substitui o valor correto de D0Pn  = eval(Pn);                     % valores numéricosP0  = eval(P0);                     % valor médioPn(N+1) = P0;                       % substitui o valor correto de P0%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 4 - Sintese do sinal g(t) --> a partir de Dn, somar as projeções %%  4.1 - Definir o tempoM    = 1000;                        % número de pontos de simulaçãoTs   = T0/M;                        % passo de simulaçãotempo= [0:Ts:T0];                   % vetor tempo%%  4.2 - Somatória do sinalsomatoria = 0;                       % incializa a somatóriasomatoriaP = 0;                      % incializa a somatóriasomatoriaQ = 0;                      % incializa a somatóriafor k = 0:2*N                        % 2*N + 1 --> pontos    %% Síntese da onda quadrada    somatoria = somatoria + Dn(k+1)*exp(j*n(k+1)*w0*tempo);    %% Síntese do pulso centrado na origem - p(t)    somatoriaP = somatoriaP + Pn(k+1)*exp(j*n(k+1)*w0*tempo);    %% Síntese da onda quadrada a partir do pulos deslocado  %% g(t) = g1(t) - g2(t)  %% g(t) = p(t -pi/2) - p(t -3pi/2)    Dng1 = Pn(k+1)*exp(j*n(k+1)*w0*tempo)*exp(-j*n(k+1)*w0*tau/2);  Dng2 = Pn(k+1)*exp(j*n(k+1)*w0*tempo)*exp(-j*n(k+1)*w0*3*tau/2);  somatoriaQ = somatoriaQ + Dng1 - Dng2;  endgt   =  somatoria;                   % sinal sintetizadopt   =  somatoriaP;                  % sinal sintetizadoqt   =  somatoriaQ;                  % sinal sintetizado%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 5 - Visualizar: Dn (análise) e g(t) (síntese) figure(1)                           % domínio da frequênciastem(f,abs(Dn));xlabel('Frequência em Hertz')ylabel('Amplitude em Volts')title('Espectro de Amplitudes')figure(2)                           % domínio do tempoplot(tempo,gt);xlabel('Tempo em segundos')ylabel('Amplitude em Volts')title('Sinal no tempo')figure(3)                           % domínio da frequênciastem(f,abs(Pn));xlabel('Frequência em Hertz')ylabel('Amplitude em Volts')title('Espectro de Amplitudes')figure(4)                           % domínio do tempoplot(tempo,pt);xlabel('Tempo em segundos')ylabel('Amplitude em Volts')title('Sinal no tempo')figure(5)                           % domínio do tempoplot(tempo,qt);xlabel('Tempo em segundos')ylabel('Amplitude em Volts')title('Sinal no tempo')%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 6 - Filtrando a onda g(t)%% Definindo o filtro%% Integrador --> 1/s%% Laplace e Fourier  --> s = jw%% Integrador 1/(jw)%% Filtro 1/(jwRC+1) ==> RC>>1 --> 1/jwRCR = 100C = 1H = @(w,R,C)  (R*C)./(j*w*R*C+1)%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 4 - Sintese do sinal de saída y(t) %%  4.1 - Definir o tempoM    = 1000;                        % número de pontos de simulaçãoTs   = T0/M;                        % passo de simulaçãotempo= [0:Ts:T0];                   % vetor tempo%%  4.2 - Somatória do sinalsomatoria = 0;                       % incializa a somatóriafor k = 0:2*N                        % 2*N + 1 --> pontos    %% Síntese da onda quadrada    Ganho = H(n(k+1)*w0,R,C);         % Calcula o ganho na frequência    %% Aplico o ganho ao sinal de entrada    somatoria = somatoria + Dn(k+1)*exp(j*n(k+1)*w0*tempo)*Ganho;  endyt   =  somatoria;                   % sinal sintetizado%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 5 - Visualizar a saídafigure(6)                           % domínio do tempoplot(tempo,yt);xlabel('Tempo em segundos')ylabel('Amplitude em Volts')title('Sinal no tempo')