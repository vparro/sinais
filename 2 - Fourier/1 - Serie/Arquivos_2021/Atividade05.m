%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 0 - Boas práticasclear all;                        % apaga todas as variáveisclose all;                        % fechar as figurasclc;                              % limpa o ambiente de simulaçãopkg load symbolic                 % somente para o OctaveN = 26;                           % número de harmôncias para análise%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 1 - Definir o sinal g(t) - onda pulsadag  = @(t)  exp(-t);                % função do sinalT0 = 1;                            % periodo do sinal  - 1Hz  w0  = 2*pi/T0;                     % frequência angularf0  = 1/T0;                        % frequência angularn   = [-N:1:N];                    % harmônicas de Fourierf   = n*f0;                        % frequência das harmônicaswc  = 2.5*f0*2*pi;                    % frequência de corte do filtrofc  = wc/(2*pi);                    % frequência de corte - 0.15 Hz%%% Harmôncias deste sinal: 0Hz, 1Hz, 2Hz, 3Hz, 4Hz, 5Hz,...%%% Filtro corte a partir de 0.15Hz%%% Saída: 0Hz - G(0)=1; 1Hz - D1*G(1) = D1*0.15; 2Hz - D2*G(2) = D2*0.08;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 2 - Calcular a integral de Fourier : tempo em frequênciasyms t n T0Dn  = inv(T0)*int(exp(-(j*n*w0+1)*t),t,0,T0);D0  = inv(T0)*int(exp(-t),t,0,T0) ;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 3 - Calcular os valores numéricos de DnT0  = 1;                            % redefine periodon   = [-N:1:N];                     % redefine os valores de nDn  = eval(Dn);                     % valores numéricosD0  = eval(D0);                     % valor médioDn(N+1) = D0;                       % substitui o valor correto de D0%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 4 - Definir o filtro - H(w)Hw = @(w,wc)  (wc./(wc+j*w)).*(wc./(wc+j*w));       % Função de transferência do filtro                                  % w  - frequência                                  % wc - frequência de corte                                  % Hw - ganho em função da frequência%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 5 - Aplicar o filtro - Y(w) - Dnyw   = n*w0;                       % vetor de frequências para determinar o ganhof   = w/(2*pi);                   % vetor frequênciaDny = Hw(w,wc).*Hw(w,wc).*Hw(w,wc).*Dn;  % determinando a saída%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 4 - Sintese do sinal g(t) --> a partir de Dn, somar as projeções %%%% 4 - Sintese do sinal y(t) --> a partir de Dny, somar as projeções%%  4.1 - Definir o tempoM    = 1000;                        % número de pontos de simulaçãoTs   = T0/M;                        % passo de simulaçãotempo= [0:Ts:T0];                   % vetor tempo%%  4.2 - Somatória do sinalsomatoria = 0;                      % incializa a somatóriasomatoriay = 0;                      % incializa a somatóriafor k = 0:2*N                       % 2*N + 1 --> pontos    somatoria = somatoria + Dn(k+1)*exp(j*n(k+1)*w0*tempo);       % sintese da entrada  somatoriay = somatoriay + Dny(k+1)*exp(j*n(k+1)*w0*tempo);    % sintese da saida  endgt   =  somatoria;                  % sinal sintetizadoyt   =  somatoriay;                  % sinal sintetizado%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 5 - Visualizar: Dn (análise) e g(t) (síntese) figure(1)                           % domínio da frequênciastem(f,abs(Dn));xlabel('Frequência em Hertz')ylabel('Amplitude em Volts')title('Espectro de Amplitudes')figure(2)                           % domínio do tempoplot(tempo,gt,"linewidth", 3, tempo,g(tempo),"linewidth", 2);xlabel('Tempo em segundos')ylabel('Amplitude em Volts')title('Sinal de entrada do filtro no tempo')figure(3)                           % domínio da frequênciastem(f,abs(Dny));xlabel('Frequência em Hertz')ylabel('Amplitude em Volts')title('Espectro de Amplitudes')figure(4)                           % domínio do tempoplot(tempo,yt,"linewidth", 3, tempo,g(tempo),"linewidth", 2);xlabel('Tempo em segundos')ylabel('Amplitude em Volts')title('Sinal de saida do filtro no tempo')figure(5)subplot(2,1,1)plot(f,abs(Hw(2*pi*f,wc)))title('Modulo');xlabel('Frequencia');ylabel('Ganho');subplot(2,1,2)plot(f,angle(Hw(2*pi*f,wc))*180/pi)title('Fase');xlabel('Frequencia');ylabel('Ganho');