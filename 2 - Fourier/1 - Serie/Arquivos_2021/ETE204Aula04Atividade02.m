%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 1 - Preparação do código %% %% Boas práticas: limpeza de variáveis; variáveis globais%% Constantes; carregar bibliotecas;...%%%%% Limpezaclc;          % limpa visual da tela de comandosclose all;    % limpa as figurasclear all;    % limpa as variáveis%%% Carregar bibliotecaspkg load symbolic;  % biblioteca simbólica%%% Omite os avisos de warningswarning("off");%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 2 - Problema%%%% aproximar uma onda quadrada por um sinal%% harmônico - g(t) = exponencial%% %% Definir a exponencial g(t)display('2 - Definindo o sinal g(t) ...')gt_teo   = @(t) exp(-t);  % define a função - handleTo       = 1 ;            % período g(t)to       = 0;             % instante inicial de g(t)%%% Parâmetros calculadosfo = 1/To;    % frequência da onda quadradawo = 2*pi*fo; % frequência angular de g(t)%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  3 - calcular o valor de Dn%% %%  Ambiente de cálculo integral e simbólico%%  %%  Symbolic pkg v2.9.0: %%  Python communication link active, SymPy v1.5.1.%%display('3 - Determinando Dn simbolicamente ...')syms n t  % t - tempo variável simbólica%%% numerador de anInum    = int(exp(-(1+j*n*wo)*t),t,to,To);%%% determinando Dn para cálculo de anDn = Inum/To;%%% D0 é valor médioI0    = int(exp(-(1+j*0*wo)*t),t,to,To);D0    = I0/To;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 4 -  Substituindo os valores de ndisplay('4 - Determinando Dn numericamente ...')N  = 10;              % número de harmônicasn  = [-N:1:N];        % índice de harmônicas%%%%%% eixo frequenciafrequencia = n*fo;    % multipla inteira da frequência fundamentalDn      = eval(Dn);        % determinar os valores de Dn para cada nD0      = eval(D0);        % determina o valor numéricoDn(N+1) = D0;              % subititui o NaN pelo valor correto%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  5 -  Síntese de Fourier%%%%%%  g(t) =  sum_{n=-N}^{N} Dn * exp(j n wo t)display('5 - Sintetizando o sinal g(t) ...')gt    = 0 ;                   % valor inicial de g(t)g1t   = 0 ;                   % valor inicial de g1(t)M     = 1000;                 % Número de pontos do sinal (resolução)tempo = linspace(-To,To,M);   % vetor linear de tempo%%%  somatória de sintesefor k = 1 : 2*N+1             % N pontos negativos + zero + N pontos positivos                              % 2N + 1  fator = exp(-j*n(k)*pi/2);  % fator devido ao deslocamento    %%% sinal original  gt = gt + Dn(k) * exp(j*n(k)*wo*tempo);    %%% sinal deslocado  g1t = g1t + fator*Dn(k) * exp(j*n(k)*wo*tempo);  end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  6 -  Para efeito de comparação%%%%%%  sinal teórico - g(t)tp  = linspace(0,To,M/2);       % tempo positivogteo = [gt_teo(tp) gt_teo(tp)]; % concatena os dois vetores%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  7 -  Visualização%%%%figure(1)plot(tempo,gt,'g-','linewidth',3)           % configura plot(x,y, cor verde e linha cheia)hold;                                       % memoriza o primeiro gráficoplot(tempo,g1t,'k-','linewidth',3)          % configura plot(x,y, cor preta e linha cheia)plot(tempo,gteo,'b..','linewidth',3)        % configura plot(x,y, cor preta e linha cheia)xlabel('Tempo em segundos')                 % tempo em segundosylabel('Amplitude')                         % amplitude em voltstitle('Sinais g(t) e g1(t) sintetizados')   % títulogridfigure(2)stem(frequencia,Dn,'k-','linewidth',3)     % configura plot(x,y, cor azul e linha cheia)xlabel('Frequência em Hz')                 % tempo em segundosylabel('Amplitude')                        % amplitude em voltstitle('Espectro de amplitude')             % títulogrid