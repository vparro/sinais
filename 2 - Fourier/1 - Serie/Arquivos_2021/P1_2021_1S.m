%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 0 - Boas práticas %% %%%%clear all;            % limpa as variáveisclose all;            % fecha as figurasclc;                  % limpa a telapkg load symbolic     % somente para o Octave%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 1 - sinal a ser analisado no domínio do tempo%% %%  g(t) = (1 - exp(-t)) --> 0 < t < 1 --> To = 1 segundo%%To    = 1;                % período do sinalM     = 1000;             % resolução: 1mstempo = linspace(0,To,M); % criei o vetor tempogt    = 1 - exp(-tempo);  % determino o vetor do sinalfigure(1)plot(tempo,gt,'linewidth', 3);grid;xlabel('Tempo em segundos');ylabel('Amplitude em volts');title('Sinal a ser analisado'); %%% Mostrando o sinal de forma periódicaTo      = 1;                       % período do sinalM       = 1000;                    % resolução: 1msNp      = 2;                       % Número de períodostempoNp = linspace(0,Np*To,Np*M);  % criei o vetor tempogtp    = [gt gt];   % concateno o sinal Np vezesfigure(2)plot(tempoNp,gtp,'linewidth', 3);grid;xlabel('Tempo em segundos');ylabel('Amplitude em volts');title('Sinal a ser analisado com Np períodos'); %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 2 - verificar se a análise de Fourier está correta%% %%  Dn = exp(-jnpi)*sen(npi)/npi + ...%%  %%  + (exp(-(1+jn2pi)) -1)/(1+jn2pi)%%%%  -- sinc (X) Compute the sinc function.%%%%   Return sin (pi*x) / (pi*x).Dn = @(n) exp(-j*n*pi).*sinc(n) + (exp(-(1+j*n*2*pi))-1)./(1+j*n*2*pi);N  = 10;                  % número de harmônicas de analisen  = [-N:1:N];            % crio o vetor de valores de n%%% Determinando as harmônicasSF   = Dn(n); fo   = 1/To;            % frequência fundamentalwo   = 2*pi*fo;         % frequência angular fundamentalfreq = n*fo;            % vetor de frequências figure(3)stem(freq,abs(SF),'linewidth', 3);grid;xlabel('Frequência em Hz');ylabel('Módulo');title('Coeficientes da série de fourier');  figure(4)stem(freq,angle(SF)*180/pi,'linewidth', 3);grid;xlabel('Frequência em Hz');ylabel('Fase');title('Coeficientes da série de fourier');                   %%% Sintese de Fourier%%%%  g(t) = sum_{-N}^{N} Dn exp(j*n*wo*t)%%gts  = 0;              % valor inicial nulogtsp = 0;              % valor inicial nulofor k = 1: 2*N+1  %%% valor acumulado  gts = gts + SF(k)*exp(j*n(k)*wo*tempo);  gtsp = gtsp + SF(k)*exp(j*n(k)*wo*tempoNp);endfigure(5)plot(tempo,gt,'linewidth', 3, 'g--');hold;plot(tempo,gts,'linewidth', 3,'b-.');grid;xlabel('Tempo em segundos');ylabel('Amplitude em volts');title('Sinal a ser analisado'); figure(6)plot(tempoNp,gtp,'linewidth', 3);hold;plot(tempoNp,gtsp,'linewidth', 3,'b-.');grid;xlabel('Tempo em segundos');ylabel('Amplitude em volts');title('Sinal a ser analisado com Np períodos'); %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 3 - cálculo de potência e valor médio%% syms tgtmedio = inv(To)*int((1 - exp(-t)),t,0,To);Pg      = inv(To)*int((1 - exp(-t)).^2,t,0,To);%%% Determinar os valores numéricosgtmedio = eval(gtmedio);      % determina a variável numericamentePg      = eval(Pg);           % determina a variável numericamente%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 4 - filtrando o sinal g(t)%% fc = 5;                            % frequência de corteRC = 1/(2*pi*fc);                    % constante de tempo RC%%% filtro com constante de tempo variávelFiltro = @(w,RC)  1./(1+j*w*RC)     % função de transferência do filtro%%% determino o ganho do filtro nas frequências de FourierGanho = Filtro(2*pi*freq,RC);    % ganho em w = 2*pi*f%%% Saída do filtro em frequênciaYw = Ganho.*SF;               % multiplequei a entrada pelo ganho%%% Saída do filtro no tempoysp = 0;              % valor inicial nulofor k = 1: 2*N+1  %%% valor acumulado  ysp = ysp + Yw(k)*exp(j*n(k)*wo*tempoNp);endfigure(7)plot(tempoNp,gtsp,'linewidth', 3,'g-.');hold;plot(tempoNp,ysp,'linewidth', 3,'b-.');grid;xlabel('Tempo em segundos');ylabel('Amplitude em volts');title('Sinal de saída de um filtro passa baixas'); figure(8)stem(freq,abs(Yw),'linewidth', 3);grid;xlabel('Frequência em Hz');ylabel('Módulo');title('Coeficientes da série de fourier da saida do filtro'); figure(9)subplot(3,1,1);     % 3 linhas, 1 coluna - primeior gráficostem(freq,abs(SF),'linewidth', 3);subplot(3,1,2);plot(freq,Ganho,'linewidth', 3)subplot(3,1,3); stem(freq,abs(Yw),'linewidth', 3);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 5 - filtrando o sinal g(t) por potência%%Py = 0.99 * Pg;       % potência desejada de saídaPreal = [abs(SF(N+1))^2 2*abs(SF(N+2:end)).^2];Pacumulada = cumsum(PReal);