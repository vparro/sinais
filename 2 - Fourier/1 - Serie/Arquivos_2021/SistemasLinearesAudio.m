%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 0 - Boas práticasclear all;                        % apaga todas as variáveisclose all;                        % fechar as figurasclc;                              % limpa o ambiente de simulaçãopkg load symbolic                 % somente para o OctaveN = 26;                           % número de harmôncias para análise%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 1 - Definir o sinal g(t) - onda pulsadaA1  = 1;                           % Nível alto da onda pulsadaA2  = 0;                           % Nível baixo da onda pulsadatau = 0.5;                         % Largura o pulso em nível altoT0  = 1;                           % Periodo do sinal  w0  = 2*pi/T0;                     % frequência angularf0  = 1/T0;                        % frequência angularn   = [-N:1:N];                    % harmônicas de Fourierf   = n*f0;                        % frequência das harmônicasw   = 2*pi*f;                      % vetor de frequências angulares%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 2 - Calcular a integral de Fourier : tempo em frequênciasyms t nDn  = inv(T0)*int(A1*exp(-j*n*w0*t),t,0,tau) + inv(T0)*int(A2*exp(-j*n*w0*t),t,tau,T0);D0  = inv(T0)*int(A1,t,0,tau) + inv(T0)*int(A2,t,tau,T0);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 3 - Calcular os valores numéricos de Dnn   = [-N:1:N];                     % redefine os valores de nDn  = eval(Dn);                     % valores numéricosD0  = eval(D0);                     % valor médioDn(N+1) = D0;                       % substitui o valor correto de D0%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 3.5 - FiltroHwFPB = @(w,RC) 1./(j*w*RC+1);           % equação do filtro passa baixasHwFPA = @(w,RC) (j*w*RC)./(j*w*RC+1);    % equação do filtro passa altas%%% Parâmetros dos filtrosfc = 1;                                     % frequência de corte em Hzwc = 2*pi*fc;                               % frequência angular corteRC = 1/wc;                                  % o produto RC ou constante de tempo%%% parâmetros de integral e derivadafci = 0.1;                                    % frequência de corte em Hzwci = 2*pi*fci;                               % frequência angular corteRCi = 1/wci;                                  % o produto RC ou constante de tempofcd = 10;                                     % frequência de corte em Hzwcd = 2*pi*fcd;                               % frequência angular corteRCd = 1/wcd;                                  % o produto RC ou constante de tempo%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 4 - Sintese do sinal g(t) --> a partir de Dn, somar as projeções %%  4.1 - Definir o tempoM    = 1000;                        % número de pontos de simulaçãoTs   = T0/M;                        % passo de simulaçãotempo= [0:Ts:T0];                   % vetor tempo%%  4.2 - Somatória do sinalentrada    = 0;                      % incializa a somatóriasaida      = 0;                      % incializa a somatóriasaidaFPA   = 0;                      % incializa a somatóriafor k = 0:2*N                       % 2*N + 1 --> pontos    entrada    = entrada + Dn(k+1)*exp(j*n(k+1)*w0*tempo);  saida      = saida + HwFPB(w(k+1),RCi).*Dn(k+1)*exp(j*n(k+1)*w0*tempo);  saidaFPA   = saidaFPA + HwFPA(w(k+1),RCd).*Dn(k+1)*exp(j*n(k+1)*w0*tempo);  endgt   =  entrada;                  % sinal sintetizado de entradagf   =  saida;                    % sinal sintetizado de saidagPA  =  saidaFPA;                 % sinal sintetizado de saida%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 5 - Visualizar: Dn (análise) e g(t) (síntese) figure(1)                           % domínio da frequênciastem(f,abs(Dn));xlabel('Frequência em Hertz')ylabel('Amplitude em Volts da entrada')title('Espectro de Amplitudes')figure(2)                           % domínio da frequênciasubplot(3,1,1);                     % entradastem(f,abs(Dn),'linewidth',3);xlabel('Frequência em Hertz')ylabel('Amplitude em Volts da entrada')title('Espectro de Amplitudes')subplot(3,1,2);                     % filtroplot(f,abs(HwFPB(w,RCi)),'linewidth',3);xlabel('Frequência em Hertz')ylabel('Ganho do filtro')title('Resposta em frequência - Modulo')subplot(3,1,3);                     % sinal filtradostem(f,abs(HwFPB(w,RCi).*Dn),'linewidth',3);xlabel('Frequência em Hertz')ylabel('Amplitude em volts da saída')title('Espectro de Amplitudes')figure(3)                           % domínio da frequênciasubplot(3,1,1);                     % entradastem(f,abs(Dn),'linewidth',3);xlabel('Frequência em Hertz')ylabel('Amplitude em Volts da entrada')title('Espectro de Amplitudes')subplot(3,1,2);                     % filtroplot(f,abs(HwFPA(w,RCd)),'linewidth',3);xlabel('Frequência em Hertz')ylabel('Ganho do filtro')title('Resposta em frequência - Modulo')subplot(3,1,3);                     % sinal filtradostem(f,abs(HwFPA(w,RCd).*Dn),'linewidth',3);xlabel('Frequência em Hertz')ylabel('Amplitude em volts da saída')title('Espectro de Amplitudes')figure(4)                           % domínio do tempoplot(tempo,gt,'linewidth',3, tempo,2*gf, 'linewidth',3);xlabel('Tempo em segundos')ylabel('Amplitude em Volts')title('Sinal no tempo')figure(5)                           % domínio do tempoplot(tempo,gt,'linewidth',3, tempo,1+gPA, 'linewidth',3);xlabel('Tempo em segundos')ylabel('Amplitude em Volts')title('Sinal no tempo')%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 6 - Cáculo de potência do sinal%%  6.1 - Cáculo no tempoPg  =  inv(T0)* int(A1^2,t,0,tau) + inv(T0)* int(A2^2,t,tau,T0);Pg  =  eval(Pg);%%  6.2 - Cáculo na frequênciaVetor = [abs(Dn(N+1)^2) 2*abs(Dn(N+2:end)).^2];Pgn   = cumsum(Vetor);clc;Banda = (Pgn(end)/Pg)*100;