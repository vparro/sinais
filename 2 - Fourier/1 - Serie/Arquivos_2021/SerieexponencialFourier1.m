%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 1 - Preparação do código %% %% Boas práticas: limpeza de variáveis; variáveis globais%% Constantes; carregar bibliotecas;...%%%%% Limpezaclc;          % limpa visual da tela de comandosclose all;    % limpa as figurasclear all;    % limpa as variáveis%%% Carregar bibliotecaspkg load symbolic;  % biblioteca simbólica%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 2 - Problema%%%% aproximar uma onda quadrada por um sinal%% harmônico - g(t) = c. cos(t) + erro%% %% Definir a onda quadradaAp = +1;    % amplitude positiva de g(t)An = 0 ;    % amplitude negativa de g(t)To = 2*pi ; % período da onda quadradato = -pi/2; % instante inicial de g(t)%%% Parâmetros calculadosfo = 1/To;    % frequência da onda quadradawo = 2*pi*fo; % frequência angular de g(t)%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  3 - calcular o valor de c%% %%  Ambiente de cálculo integral e simbólico%%  %%  Symbolic pkg v2.9.0: %%  Python communication link active, SymPy v1.5.1.%%syms n t  % t - tempo variável simbólica%%% determinando o termo da série exponencialIp    = int(Ap*exp(-j*n*wo*t),t,to,to+To/2);In    = int(An*exp(-j*n*wo*t),t,to+To/2,to+To);Inum  = Ip + In; Dn = Inum/To;       % determina o os termos da série%%% determinando o valor médio do sinal - D0Ip    = int(Ap,t,to,to+To/2);In    = int(An,t,to+To/2,to+To);Inum  = Ip + In; D0    = Inum/To;       % determina o valor médio%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 4 -  Substituindo os valores de nN  = 10;              % número de harmônicasn  = [-N:1:N];        % índice de harmônicas%%%%%% eixo frequenciafrequencia = n*fo;    % multipla inteira da frequência fundamentalDn      = eval(Dn);   % determinar os valores de Dn para cada nD0      = eval(D0);   % determina D0 numericamenteDn(N+1) = D0;         % substitui o NaN referente a indeterminação%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  5 -  Síntese de Fourier%%%%%%  g(t) =  sum_{n=-N}^{N} Dn * exp(j n wo t)gt    = 0;                    % valor inicial de g(t) - nuloM     = 1000;                 % Número de pontos do sinal (resolução)tempo = linspace(-To,To,M);   % vetor linear de tempofor k = 1 : 2*N+1             % Tenho agora 2*N pontos mais o zero    gt = gt + Dn(k) * exp(+j*n(k)*wo*tempo);  end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  6 -  Visualização%%%%figure(1)plot(tempo,gt,'k-','linewidth',3)     % configura plot(x,y, cor azul e linha cheia)xlabel('Tempo em segundos')           % tempo em segundosylabel('Amplitude')                   % amplitude em voltstitle('Sinal g(t) sinteizado')        % títulogridfigure(2)stem(frequencia,Dn,'k-','linewidth',3)     % configura plot(x,y, cor azul e linha cheia)xlabel('Frequência em Hz')                 % tempo em segundosylabel('Amplitude')                        % amplitude em voltstitle('Espectro de amplitude')             % títulogrid