%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 0 - Boas práticasclear all;                        % apaga todas as variáveisclose all;                        % fechar as figurasclc;                              % limpa o ambiente de simulaçãopkg load symbolic                 % somente para o Octave%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 1 - Definir o sinal g[k] - sinal amostradoT0    = 1;                           % duração da senoidef0    = 1/T0;                        % f0 = 1Hztempo = linspace(0,T0,100)           % fa = 100Hz --> Ta =0.1sgk1    = sin((2*pi/T0)*tempo)        % Amostrasgk2    = sin((4*pi/T0)*tempo) gk3    = sin((6*pi/T0)*tempo) gk = gk1 + gk2 + gk3%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 2 - Calcular a somatória de Fourier : tempo em frequênciaN = length(gk);                   % número de amostras%% 1/N somatoria(0 --> N-1) g[k] e(-j 2 pi n k/N)WN = exp(-j*2*pi/N);              % determina o que é sempre constantefor n =0:N-1    somatoria = 0;    for k =0:N-1                      % vou analisar dentro de um periodo      somatoria =  somatoria + gk(k+1)*WN^(n*k);  % calculo a somatoria      end        Xn(n+1)= (1/N) * somatoria;              % armazeno o valor de Xn    end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 4 - Visualizar: Xn (análise) e g(t) (síntese) figure(1)                          stem(tempo, gk);xlabel('Tempo - Ta')ylabel('Amplitude em Volts')title('Sinal Amostrado')figure(2)                          stem([0:1:N-1],abs(Xn));xlabel('Frequência em Hertz')ylabel('Amplitude em Volts')title('Espectro de Amplitudes')