%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 0 - Problema%% Determinar a projeção de um sinal g(t)% em sinais harmônicos - % 1. integral simbólica;% 2. substituição de valores (n=1,2,3,...);% 3. somatória - g(t) = sum_{n=1}^N cn xn(t);% 4. visualização - plotar o gráfico - g(t)%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 1 - Preparação do ambiente (Boas práticas)clear all;      % limpa as variáveisclose all;      % limpa as figurasclc;            % limpa (visualmente) a tela%%% Bibliotecaspkg load symbolic;  % carrega o pacote simbólico%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 2 - Definir a onda quadrada - g(t)%% por segmentosAp  = +1;     % amplitude positivaAn  = -1;     % amplitude negativaTo  = 2*pi;   % período da onda quadradato  = -pi/2;  % instante inicial%%% Determinar parâmetros adicionais fo  = 1/To;   % frequência da onda quadradawo  = 2*pi*fo;% frequência angular de g(t)%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 3 - Cálculo do cn%% Symbolic pkg v2.9.0: % Python communication link active, SymPy v1.5.1.syms n t %%% Integral do numeradorIpos = int(Ap*cos(n*t),t,to,to+To/2);Ineg = int(An*cos(n*t),t,to+To/2,to+To);Inum = Ipos + Ineg;%%% Integral do denominadorIden = int(cos(n*t)*cos(n*t),t,0,To);%%% Valor de cn - simbólicocn = Inum/Iden;%%% Determinar os valores de cn - numéricos% n = [1,2,3,4,5,6,7,8,9,10];N = 100;      % número de aproximaçõesn = [1:1:N];  % vetor parametrizadocnNumerico = eval(cn)  % faz a substituição%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 4 - Visualizaçãofigure()stem(n,cnNumerico);xlabel('valores de n');ylabel('Amplitude - cn');title('Decomposição do sinal g(t)');grid;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 5 - Sintetizador%%% criando um sinal harmônicoM     = 1000;             % número de pontostempo = linspace(-To,To,M); % vetor tempoy     = cos(tempo);       % criei um sinal harmônicofigure()plot(tempo,y,'linewidth',2);xlabel('Tempo');ylabel('Amplitude');title('Sinal Harmônico');grid;%%% aproximando g(t)g  = cnNumerico(1)*cos(tempo);g  = g + cnNumerico(2)*cos(2*tempo);g  = g + cnNumerico(3)*cos(3*tempo);g  = g + cnNumerico(4)*cos(4*tempo);g  = g + cnNumerico(5)*cos(5*tempo);g  = g + cnNumerico(6)*cos(6*tempo);g  = g + cnNumerico(7)*cos(7*tempo);g  = g + cnNumerico(8)*cos(8*tempo);g  = g + cnNumerico(9)*cos(9*tempo);g  = g + cnNumerico(10)*cos(10*tempo);figure()plot(tempo,g,'linewidth',2);xlabel('Tempo');ylabel('Amplitude');title('Sinal aproximado - g(t)');grid;%%% Sintetizando de outra formatg1  = cnNumerico(1)*cos(tempo);for k = 2 : N    g1 = g1 + cnNumerico(k)*cos(k*tempo);  endfigure()plot(tempo,g1,'linewidth',2,'k-');xlabel('Tempo');ylabel('Amplitude');title('Sinal aproximado - g(t)');grid;  