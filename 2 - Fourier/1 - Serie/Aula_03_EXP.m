%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 1 - Preparação do código %% %% Boas práticas: limpeza de variáveis; variáveis globais%% Constantes; carregar bibliotecas;...%%%%% Limpeza%%% Comentáriosclc;          % limpa visual da tela de comandosclose all;    % limpa as figurasclear all;    % limpa as variáveis%%% Carregar bibliotecaspkg load symbolic;  % biblioteca simbólica%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 2 - Descrever a exponencial - g(t) %% %%% Valores calculadosT     = 1;        % período de g(t)w     = 2*pi/T;   % frequência angularf     = 1/T;      % frequência em Hz%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 3 - Análise%% %%% c1 = Nc/Dc%%%%%% Nc = int_T g(t) cos(t) dt%%%%%% Dc = int_T cos^2(t) dtsyms n w t    % informando ao Octave que a variável               % t é simbólica e não numérica%%% Calculando o numeradorNc_cos = int(exp(-t).*cos(n*w*t),t,0,T);Nc_sin = int(exp(-t).*sin(n*w*t),t,0,T);%%% integral(função, variável, extremo_i, extremo_s)%%% Calculando o denominadorDc_cos = int(cos(n*w*t).^2,t,0,T);Dc_sin = int(sin(n*w*t).^2,t,0,T);%%% Derminando valores numéricos%%% Definindo os valores de nN     = 10;       % Número de sinais que desejamos decomporn     = [1:1:N];  % valores de n para os sinais de referênciafreq  = n*f;      % vetor frequênciaw     = 2*pi/T;   % frequência angular%%% Calculo cn numericamentean    = eval(Nc_cos./Dc_cos); % Projeção em cosseno.bn    = eval(Nc_sin./Dc_sin); % Projeção em cosseno.ao    = eval(inv(T)*int(exp(-t),t,0,T));Pg    = eval(inv(T)*int(exp(-t).^2,t,0,T));%%% Visualizar o resultado --> espectro de amplitudesfigure(1)stem(freq,an);title('Espectro de amplitudes - cosseno')ylabel('Amplitude')xlabel( 'Frequencia em Hz')%%% Modifica parâmetros do gráficoset(findall(gcf,'Type','line'),'LineWidth',3);set(gca,'FontSize',14,'LineWidth',2);figure(2)stem(freq,bn);title('Espectro de amplitudes - seno')ylabel('Amplitude')xlabel( 'Frequencia em Hz')%%% Modifica parâmetros do gráficoset(findall(gcf,'Type','line'),'LineWidth',3);set(gca,'FontSize',14,'LineWidth',2);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 4 - Síntese%% M     = 3000;             % número de pontos em um período;tempo = linspace(0,3*T,M);  % vetor tempo propriamente ditoaux   = ao;               % valor inicial da somatóriafor n = 1:N    %%% somatória    aux = aux + an(n)*cos(n*w*tempo) + bn(n)*sin(n*w*tempo);  endgt_sintetizado = aux;     % sinal sintetizadofigure(3)plot(tempo,gt_sintetizado);hold;% plot(tempo,exp(-tempo));title('Sinal sintetizado')ylabel('Amplitude')xlabel( 'tempo em segundos')%%% Modifica parâmetros do gráficoset(findall(gcf,'Type','line'),'LineWidth',3);set(gca,'FontSize',14,'LineWidth',2);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 5 - Série exponencial de Fourier%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 5.1 - Definir o sinal g(t) - exponencialg  = @(t)  exp(-t);                % função do sinal%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 5.2 - Calcular a integral de Fourier : tempo em frequênciasyms t n T0 w0    % variáveis simbólicas%%% Determinando Dn e D0 em valores literaisDn  = inv(T0)*int(exp(-(j*n*w0+1)*t),t,0,T0);D0  = inv(T0)*int(exp(-t),t,0,T0) ;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 5.3 - Calcular os valores numéricos de Dn%%% defino os valores numéricosT0  = 1;                            % redefine periodow0  = 2*pi/T0;                     % frequência angularf0  = 1/T0;                        % frequência angularn   = [-N:1:N];                    % harmônicas de Fourierf   = n*f0;                        % frequência das harmônicast0  = 0.2;                         % quero atrasar de 0.2 segundo%%% cálculo os valores numéricos das expressões literaisDn  = eval(Dn);                     % valores numéricosD0  = eval(D0);                     % valor médioDn(N+1) = D0;                       % substitui o valor correto de D0%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 5.4 - Sintese do sinal g(t) --> a partir de Dn, somar as projeções %%  5.4.1 - Definir o tempoM    = 1000;                        % número de pontos de simulaçãoTs   = T0/M;                        % passo de simulaçãotempo= [0:Ts:T0];                   % vetor tempo%%  5.4.2 - Somatória do sinalsomatoria = 0;                      % incializa a somatóriafor k = 0:2*N                       % 2*N + 1 --> pontos    somatoria = somatoria + Dn(k+1)*exp(j*n(k+1)*w0*tempo).*exp(-j*n(k+1)*w0*t0);  endgt   =  somatoria;                  % sinal sintetizado%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 5 - Visualizar: Dn (análise) e g(t) (síntese) figure(4)                           % domínio da frequênciastem(f,abs(Dn));xlabel('Frequência em Hertz')ylabel('Amplitude em Volts')title('Espectro de Amplitudes')figure(5)                           % domínio do tempoplot(tempo,gt,"linewidth", 3, tempo,g(tempo),"linewidth", 2);xlabel('Tempo em segundos')ylabel('Amplitude em Volts')title('Sinal no tempo')