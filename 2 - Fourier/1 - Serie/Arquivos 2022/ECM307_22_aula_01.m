%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 0 - Preparação do código %% %% Boas práticas: limpeza de variáveis; variáveis globais%% Constantes; carregar bibliotecas;...%%%%% Descrição: calcula a semelhança entre dois sinais periódicos%%clc;                % limpa a telaclear all;          % limpar as variáveisclose all;          % fecha as figuras abertaspkg load symbolic;  % carrega o pacote de análise simbólica%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 2 - Descrever os sinais envolvidos%% %%  g(t) --> sinal a ser analisado%%  x(t) --> sinal de referência%%%%% Definindo o sinal g(t)Ap = +1;          % amplitude positivaAn = -1;          % amplitude negativaTo = 2*pi;        % períodoTp = pi;          % duração do ciclo positivoTn = pi;          % duração do ciclo negativo%%% Definindo o sinal x(t)w = 2*pi/To;          % frequência angular do sinalx = @(w,t) sin(w*t)   % sinal x(t)%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 3 - Descrever as operações a serem calculadas simbolicamente%% %%syms c t                % cria as variáveis simbólicas%%% Integral I - erro(c) = int_To [g(t)-cx(t)]^2 dterro = int((1-c*sin(t))^2,t,0,pi) + int((-1-c*sin(t))^2,t,pi,2*pi);%%% Integral II -  c = int_To g(t)x(t) dt /  int_To x(t)^2 dtNumerador    = int(+1*sin(t),t,0,pi) + int(-1*sin(t),t,pi,2*pi);Denominador  = int(sin(t)^2,t,0,2*pi);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 4 - Visualização numérica%% %%c = [0:0.0001:2];             % Conjunto de valores de cerro_numerico = eval(erro); % Ceterminar o valor numérico do erro%%% determina o valor mínimo do erro e o índice correspondente[erro_min i_min] = min(erro_numerico);%%% Qual o valor de c que corresponde ao erro mínimoclc;          % limpa o processamento anteriorc_min = c(i_min)figure(1)plot(c,erro_numerico,'linewidth',2,'k');grid minor;       % gridxlabel('o valor de c')ylabel('erro(c)')title('Como o erro varia com c')%%% Deteminar o valor final de cc_otimo = eval(Numerador/Denominador)